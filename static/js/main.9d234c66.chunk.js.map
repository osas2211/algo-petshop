{"version":3,"sources":["utils/conversions.js","contracts/mod_approval.teal","contracts/mod_clear.teal","contracts/petshop_approval.teal","contracts/petshop_clear.teal","components/Cover.jsx","components/utils/Identicon.jsx","components/Wallet.jsx","components/petshop/AddPet.jsx","components/petshop/PetCard.jsx","components/petshop/ModOptions.jsx","components/utils/Loader.jsx","components/utils/Notifications.jsx","components/petshop/Pets.jsx","assets/img/petshop.jpg","App.js","reportWebVitals.js","index.js","utils/petContract.js","utils/constants.js","utils/modContract.js"],"names":["base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","ALGORAND_DECIMALS","toFixed","stringToMicroAlgos","str","toNumber","Cover","name","coverImg","connect","className","style","maxWidth","src","alt","Button","onClick","variant","Identicon","size","rest","width","height","diameter","seed","parseInt","Wallet","amount","symbol","disconnect","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","AddPet","createPet","useState","setName","image","setImage","breed","setBreed","age","setAge","location","setLocation","isFormFilled","useCallback","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","onChange","e","value","placeholder","Footer","disabled","a","console","log","PetCard","pet","adoptPet","deletePet","appId","adopted","owner","appCreator","isAdopted","Col","Card","rel","objectFit","Text","ModOptions","createMod","updateFee","modContract","adoptionFee","setAdoptionFee","show1","setShow1","Number","adoptFee","Loader","role","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","NotificationInfo","DefaultProps","defaultProps","Pets","fetchBalance","pets","setPets","setModContract","loading","setLoading","petsFetchComplete","setPetFetch","modFetchComplete","setModFetch","getPets","toast","getPetsAction","then","catch","error","finally","_","getModStatus","getModContract","modC","data","createPetAction","adoptPetAction","deletePetAction","createModContract","newFee","updateFeeAction","useEffect","ignore","marginTop","Row","xs","sm","lg","map","index","App","setAddress","balance","setBalance","accountAddress","indexerClient","lookupAccountByID","do","response","_balance","account","connectWallet","myAlgoConnect","accounts","_account","Container","fluid","Nav","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","Pet","this","compileProgram","programSource","encoder","TextEncoder","programBytes","encode","contractParams","compile","compileResponse","Uint8Array","result","senderAddress","getTransactionParams","params","petApprovalProgram","compiledApprovalProgram","petClearProgram","compiledClearProgram","note","appArgs","txn","algosdk","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","approvalProgram","clearProgram","numLocalInts","numLocalByteSlices","numGlobalInts","numGlobalByteSlices","txId","txID","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","confirmedTxn","pendingTransactionInformation","transactionResponse","adoptArg","newOwner","foreignApps","appCallTxn","makeApplicationCallTxnFromObject","appIndex","paymentTxn","makePaymentTxnWithSuggestedParamsFromObject","to","txnArray","groupID","computeGroupID","i","group","tx","sender","makeApplicationDeleteTxnFromObject","apid","encodedNote","searchForTransactions","notePrefix","txType","minRound","transactionInfo","transactions","transaction","getApplication","push","lookupApplications","includeAll","application","deleted","globalState","creator","undefined","getField","field","bytes","uint","fieldName","find","state","key","config","algodClient","Algodv2","Indexer","MyAlgoConnect","petShopNote","numLocalBytes","numGlobalBytes","modContractNote","numModLocalInts","numModLocalBytes","numModGlobalInts","numModGlobalBytes","modCreator","ModContract","fee","modApprovalProgram","modClearProgram","fee_arg","encodeUint64","newFeeArg","feeArg","getModApplication","_modContract"],"mappings":"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","file":"static/js/main.9d234c66.chunk.js","sourcesContent":["import {ALGORAND_DECIMALS} from \"./constants\";\nimport BigNumber from \"bignumber.js\";\n\nexport const base64ToUTF8String = (base64String) => {\n    return Buffer.from(base64String, 'base64').toString(\"utf-8\")\n}\n\nexport const utf8ToBase64String = (utf8String) => {\n    return Buffer.from(utf8String, 'utf8').toString('base64')\n}\n\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 5, address.length);\n}\n\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\nexport const microAlgosToString = (num) => {\n    if (!num) return\n    let bigNumber = new BigNumber(num)\n    return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\n}\n\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\nexport const stringToMicroAlgos = (str) => {\n    if (!str) return\n    let bigNumber = new BigNumber(str)\n    return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\n}","export default \"#pragma version 6\\ntxn ApplicationID\\nint 0\\n==\\nbnz main_l6\\ntxn OnCompletion\\nint DeleteApplication\\n==\\nbnz main_l5\\ntxna ApplicationArgs 0\\nbyte \\\"newFee\\\"\\n==\\nbnz main_l4\\nerr\\nmain_l4:\\nbyte \\\"FEE\\\"\\napp_global_get\\nstore 0\\ntxn NumAppArgs\\nint 2\\n==\\nassert\\ntxna ApplicationArgs 1\\nbtoi\\nint 0\\n>\\nassert\\nload 0\\ntxna ApplicationArgs 1\\nbtoi\\n!=\\nassert\\nbyte \\\"FEE\\\"\\ntxna ApplicationArgs 1\\nbtoi\\napp_global_put\\nint 1\\nreturn\\nmain_l5:\\ntxn Sender\\nglobal CreatorAddress\\n==\\nreturn\\nmain_l6:\\ntxn NumAppArgs\\nint 1\\n==\\nassert\\ntxn Note\\nbyte \\\"pet-shop:uModv2\\\"\\n==\\nassert\\ntxna ApplicationArgs 0\\nbtoi\\nint 0\\n>\\nassert\\nbyte \\\"FEE\\\"\\ntxna ApplicationArgs 0\\nbtoi\\napp_global_put\\nint 1\\nreturn\";","export default \"#pragma version 6\\nint 1\\nreturn\";","export default \"#pragma version 6\\ntxn ApplicationID\\nint 0\\n==\\nbnz main_l9\\ntxn OnCompletion\\nint DeleteApplication\\n==\\nbnz main_l8\\ntxna ApplicationArgs 0\\nbyte \\\"adopt\\\"\\n==\\nbnz main_l4\\nerr\\nmain_l4:\\nbyte \\\"OWNER\\\"\\napp_global_get\\nstore 1\\nglobal GroupSize\\nint 2\\n==\\ntxn GroupIndex\\nint 0\\n==\\n&&\\ntxn NumApplications\\nint 1\\n==\\n&&\\ntxn NumAppArgs\\nint 2\\n==\\n&&\\nload 1\\ntxna ApplicationArgs 1\\n!=\\n&&\\nassert\\ntxna Applications 1\\nbyte \\\"FEE\\\"\\napp_global_get_ex\\nstore 3\\nstore 2\\nload 3\\nbnz main_l7\\nbyte \\\"ADOPT_FEE\\\"\\nint 0\\napp_global_put\\nmain_l6:\\nbyte \\\"ADOPT_FEE\\\"\\napp_global_get\\nint 0\\n>\\ngtxn 1 TypeEnum\\nint pay\\n==\\n&&\\ngtxn 1 Receiver\\nglobal CreatorAddress\\n==\\n&&\\ngtxn 1 Amount\\nbyte \\\"ADOPT_FEE\\\"\\napp_global_get\\n==\\n&&\\ngtxn 1 Sender\\ngtxn 0 Sender\\n==\\n&&\\nassert\\nbyte \\\"ADOPTED\\\"\\nint 1\\napp_global_put\\nbyte \\\"OWNER\\\"\\ntxna ApplicationArgs 1\\napp_global_put\\nint 1\\nreturn\\nmain_l7:\\nbyte \\\"ADOPT_FEE\\\"\\nload 2\\napp_global_put\\nb main_l6\\nmain_l8:\\nbyte \\\"OWNER\\\"\\napp_global_get\\nstore 0\\ntxn NumAppArgs\\nint 1\\n==\\nassert\\nload 0\\ntxna ApplicationArgs 0\\n==\\nreturn\\nmain_l9:\\ntxn NumAppArgs\\nint 6\\n==\\nassert\\ntxn Note\\nbyte \\\"pet-shop:uPetsv2\\\"\\n==\\nassert\\nbyte \\\"NAME\\\"\\ntxna ApplicationArgs 0\\napp_global_put\\nbyte \\\"IMAGE\\\"\\ntxna ApplicationArgs 1\\napp_global_put\\nbyte \\\"AGE\\\"\\ntxna ApplicationArgs 2\\napp_global_put\\nbyte \\\"BREED\\\"\\ntxna ApplicationArgs 3\\napp_global_put\\nbyte \\\"LOCATION\\\"\\ntxna ApplicationArgs 4\\napp_global_put\\nbyte \\\"ADOPTED\\\"\\nint 0\\napp_global_put\\nbyte \\\"OWNER\\\"\\ntxna ApplicationArgs 5\\napp_global_put\\nint 1\\nreturn\";","export default \"#pragma version 6\\nint 1\\nreturn\";","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\n\nconst Cover = ({ name, coverImg, connect }) => {\n  return (\n    <div className=\"d-flex justify-content-center flex-column text-center bg-black min-vh-100\">\n      <div className=\"mt-auto text-light mb-5\">\n        <div\n          className=\" ratio ratio-1x1 mx-auto mb-2\"\n          style={{ maxWidth: \"320px\" }}\n        >\n          <img src={coverImg} alt=\"\" />\n        </div>\n        {/* <h3>{name}</h3> */}\n        <p>Please connect your wallet to continue.</p>\n        <Button\n          onClick={() => connect()}\n          variant=\"outline-light\"\n          className=\"rounded-pill px-3 mt-3\"\n        >\n          Connect Wallet\n        </Button>\n      </div>\n      <p className=\"mt-auto text-secondary\">Powered by Algorand</p>\n    </div>\n  );\n};\n\nCover.propTypes = {\n  name: PropTypes.string,\n  coverImg: PropTypes.string,\n  connect: PropTypes.func,\n};\n\nexport default Cover;\n","import Jazzicon from \"react-jazzicon\";\nimport PropTypes from \"prop-types\";\n\nconst Identicon = ({size, address, ...rest}) => (\n    <div {...rest} style={{width: `${size}px`, height: `${size}px`}}>\n        <Jazzicon diameter={size} seed={parseInt(address.slice(2, 10), 16)}/>\n    </div>\n);\n\nIdenticon.propTypes = {\n    size: PropTypes.number.isRequired,\n    address: PropTypes.string.isRequired\n};\n\nexport default Identicon;","import React from 'react';\nimport {Dropdown, Spinner, Stack} from 'react-bootstrap';\nimport {microAlgosToString, truncateAddress} from '../utils/conversions';\nimport Identicon from './utils/Identicon'\nimport PropTypes from \"prop-types\";\n\nconst Wallet = ({address, name, amount, symbol, disconnect}) => {\n    if (!address) {\n        return null;\n    }\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\n                                 className=\"d-flex align-items-center border rounded-pill py-1\">\n                    {amount ? (\n                        <>\n                            {microAlgosToString(amount)}\n                            <span className=\"ms-1\"> {symbol}</span>\n                        </>\n                    ) : (\n                        <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>\n                    )}\n                    <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu className=\"shadow-lg border-0\">\n                    <Dropdown.Item href={`https://testnet.algoexplorer.io/address/${address}`}\n                                   target=\"_blank\">\n                        <Stack direction=\"horizontal\" gap={2}>\n                            <i className=\"bi bi-person-circle fs-4\"/>\n                            <div className=\"d-flex flex-column\">\n                                {name && (<span className=\"font-monospace\">{name}</span>)}\n                                <span className=\"font-monospace\">{truncateAddress(address)}</span>\n                            </div>\n                        </Stack>\n                    </Dropdown.Item>\n                    <Dropdown.Divider/>\n                    <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\n                        disconnect();\n                    }}>\n                        <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\n                        Disconnect\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        </>\n    )\n};\n\nWallet.propTypes = {\n    address: PropTypes.string,\n    name: PropTypes.string,\n    amount: PropTypes.number,\n    symbol: PropTypes.string,\n    disconnect: PropTypes.func\n};\n\nexport default Wallet;\n","import React, { useCallback, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, FloatingLabel, Form, Modal } from \"react-bootstrap\";\n\nconst AddPet = ({ createPet }) => {\n  const [name, setName] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [breed, setBreed] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n\n  const isFormFilled = useCallback(() => {\n    return name && image && breed && age && location;\n  }, [name, image, breed, age, location]);\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button\n        onClick={handleShow}\n        variant=\"dark\"\n        className=\"rounded-pill px-0\"\n        style={{ width: \"38px\" }}\n      >\n        <i className=\"bi bi-plus\"></i>\n      </Button>\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>New Pet</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <FloatingLabel\n              controlId=\"inputName\"\n              label=\"Pet name\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n                placeholder=\"Enter name of pet\"\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputUrl\"\n              label=\"Image URL\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Image URL\"\n                onChange={(e) => {\n                  setImage(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputBreed\"\n              label=\"Breed\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"breed\"\n                onChange={(e) => {\n                  setBreed(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n            <FloatingLabel controlId=\"inputAge\" label=\"Age\" className=\"mb-3\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"age\"\n                onChange={(e) => {\n                  setAge(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Location\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Location\"\n                onChange={(e) => {\n                  setLocation(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n          </Modal.Body>\n        </Form>\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={async () => {\n              try {\n                await createPet({\n                  name,\n                  image,\n                  breed,\n                  age,\n                  location,\n                });\n                handleClose();\n              } catch (error) {\n                console.log(error);\n              }\n            }}\n          >\n            Add Pet\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\nAddPet.propTypes = {\n  createPet: PropTypes.func.isRequired,\n};\n\nexport default AddPet;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Card, Col, Stack } from \"react-bootstrap\";\nimport { truncateAddress } from \"../../utils/conversions\";\nimport Identicon from \"../utils/Identicon\";\n\nconst PetCard = ({ address, pet, adoptPet, deletePet }) => {\n  const {\n    appId,\n    name,\n    image,\n    age,\n    breed,\n    location,\n    adopted,\n    owner,\n    appCreator,\n  } = pet;\n\n  const isAdopted = () => adopted === 1;\n\n  const hasAccess = () => address === owner || address === appCreator;\n\n  return (\n    <Col key={appId}>\n      <Card className=\"h-100\">\n        <Card.Header>\n          <Stack direction=\"horizontal\" gap={2}>\n            <Identicon size={28} address={owner} />\n            <span className=\"font-monospace text-secondary\">\n              <a\n                href={`https://testnet.algoexplorer.io/address/${owner}`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                {isAdopted() ? truncateAddress(owner) : \"AVAILABLE\"}\n              </a>\n            </span>\n          </Stack>\n        </Card.Header>\n        <div className=\"ratio ratio-4x3\">\n          <img src={image} alt={name} style={{ objectFit: \"cover\" }} />\n        </div>\n        <Card.Body className=\"d-flex flex-column text-center\">\n          <Card.Title>{name}</Card.Title>\n          <Card.Text className=\"flex-grow-1\">\n            <strong>Breed</strong>: {breed}\n          </Card.Text>\n          <Card.Text className=\"flex-grow-1\">\n            <i className=\"bi bi-calendar\"></i> <strong>Age</strong>: {age}\n          </Card.Text>\n          <Card.Text className=\"flex-grow-1\">\n            <i className=\"bi bi-geo-alt\"></i> <strong>Location</strong>:{\" \"}\n            {location}\n          </Card.Text>\n          <div className=\"d-flex justify-content-between\">\n            <Button\n              variant=\"outline-dark\"\n              onClick={() => adoptPet(pet)}\n              className=\"w-75 py-3\"\n              disabled={isAdopted()}\n            >\n              {isAdopted() ? \"Adopted\" : `Adopt ${name}`}\n            </Button>\n\n            <Button\n              variant=\"outline-danger\"\n              onClick={() => deletePet(pet)}\n              className=\"btn\"\n              disabled={!hasAccess()}\n            >\n              <i className=\"bi bi-trash\"></i>\n            </Button>\n          </div>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nPetCard.propTypes = {\n  address: PropTypes.string.isRequired,\n  pet: PropTypes.instanceOf(Object).isRequired,\n  adoptPet: PropTypes.func.isRequired,\n  deletePet: PropTypes.func.isRequired,\n};\n\nexport default PetCard;\n","import React, { useCallback, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, FloatingLabel, Form, Modal } from \"react-bootstrap\";\nimport { stringToMicroAlgos } from \"../../utils/conversions\";\n\nconst ModOptions = ({ createMod, updateFee, modContract }) => {\n  const [adoptionFee, setAdoptionFee] = useState(0);\n\n  const isFormFilled = useCallback(() => {\n    return adoptionFee > 0;\n  }, [adoptionFee]);\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const [show1, setShow1] = useState(false);\n  const handleClose1 = () => setShow1(false);\n  const handleShow1 = () => setShow1(true);\n\n  return (\n    <>\n      <Button\n        onClick={handleShow1}\n        variant=\"dark\"\n        className=\"rounded-pill px-0\"\n        style={{ width: \"38px\" }}\n      >\n        <i className=\"bi bi-cash-coin\"></i>\n      </Button>\n\n      {Number(modContract.adoptFee) > 0 ? (\n        <> </>\n      ) : (\n        <Button\n          onClick={handleShow}\n          variant=\"dark\"\n          className=\"rounded-pill px-0\"\n          style={{ width: \"38px\" }}\n        >\n          <i className=\"bi bi-file-earmark-plus-fill\"></i>\n        </Button>\n      )}\n      {/* MOD CONTRACT MODAL */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Create Mod Contract</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <FloatingLabel\n              controlId=\"inputPrice\"\n              label=\"Fee in ALGO\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Adoption Fee\"\n                onChange={(e) => {\n                  setAdoptionFee(stringToMicroAlgos(e.target.value));\n                }}\n              />\n            </FloatingLabel>\n          </Modal.Body>\n        </Form>\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={async () => {\n              try {\n                await createMod(adoptionFee);\n                handleClose();\n              } catch (error) {\n                console.log(error);\n              }\n            }}\n          >\n            New Mod\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      {/* UPDATE FEE MODAL */}\n      <Modal show={show1} onHide={handleClose1} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Update Pet Shop Fee</Modal.Title>\n        </Modal.Header>\n        <Form>\n          <Modal.Body>\n            <FloatingLabel\n              controlId=\"inputPrice\"\n              label=\"Fee in ALGO\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Adoption Fee\"\n                onChange={(e) => {\n                  setAdoptionFee(stringToMicroAlgos(e.target.value));\n                }}\n              />\n            </FloatingLabel>\n          </Modal.Body>\n        </Form>\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={async () => {\n              try {\n                await updateFee(adoptionFee);\n                handleClose();\n              } catch (error) {\n                console.log(error);\n              }\n            }}\n          >\n            Update Fee\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\nModOptions.propTypes = {\n  createMod: PropTypes.func.isRequired,\n  updateFee: PropTypes.func.isRequired,\n};\n\nexport default ModOptions;\n","import React from \"react\";\nimport {Spinner} from \"react-bootstrap\";\n\nconst Loader = () => (\n    <div className=\"d-flex justify-content-center\">\n        <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </Spinner>\n    </div>\n);\n\nexport default Loader;\n","import React from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationInfo = ({ text }) => (\n  <div>\n    <i className=\"bi bi-info-circle-fill text-info mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nNotificationInfo.propTypes = Props;\nNotificationInfo.defaultProps = DefaultProps;\n\nexport {\n  Notification,\n  NotificationSuccess,\n  NotificationError,\n  NotificationInfo,\n};\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport AddPet from \"./AddPet\";\nimport PetCard from \"./PetCard\";\nimport ModOptions from \"./ModOptions\";\nimport Loader from \"../utils/Loader\";\nimport {\n  NotificationError,\n  NotificationSuccess,\n  NotificationInfo,\n} from \"../utils/Notifications\";\nimport { microAlgosToString } from \"../../utils/conversions\";\nimport {\n  createModContract,\n  updateFeeAction,\n  getModContract,\n} from \"../../utils/modContract\";\n\nimport {\n  adoptPetAction,\n  createPetAction,\n  deletePetAction,\n  getPetsAction,\n} from \"../../utils/petContract\";\n\nimport PropTypes from \"prop-types\";\nimport { Row } from \"react-bootstrap\";\n\nconst Pets = ({ address, fetchBalance }) => {\n  const modContractTemplate = {\n    appId: \"a\",\n    adoptFee: 0,\n  };\n\n  const [pets, setPets] = useState([]);\n  const [modContract, setModContract] = useState(modContractTemplate);\n  const [loading, setLoading] = useState(false);\n  const [petsFetchComplete, setPetFetch] = useState(false);\n  const [modFetchComplete, setModFetch] = useState(false);\n\n  // function to get list of pets\n  const getPets = useCallback(async () => {\n    setLoading(true);\n    toast(<NotificationInfo text=\"Getting Pets Data\" />);\n    getPetsAction()\n      .then((pets) => {\n        if (pets) {\n          setLoading(true);\n          setPets(pets);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .finally((_) => {\n        setPetFetch(true);\n        setLoading(false);\n      });\n  }, []);\n\n  const getModStatus = useCallback(async () => {\n    getModContract()\n      .then((modC) => {\n        if (modC) {\n          setModContract(modC);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .finally((_) => {\n        setModFetch(true);\n      });\n  }, []);\n\n  const createPet = async (data) => {\n    setLoading(true);\n    createPetAction(address, data)\n      .then(async () => {\n        toast(<NotificationSuccess text=\"Pet added successfully.\" />);\n        await getPets();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to add pet.\" />);\n      });\n  };\n\n  const adoptPet = async (pet) => {\n    setLoading(true);\n    adoptPetAction(address, pet, modContract)\n      .then(async () => {\n        toast(<NotificationSuccess text=\"Pet adopted successfully\" />);\n        await getPets();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to adopt pet.\" />);\n        setLoading(false);\n      });\n  };\n\n  const deletePet = async (pet) => {\n    setLoading(true);\n    deletePetAction(address, pet.appId)\n      .then(async () => {\n        toast(<NotificationSuccess text=\"Pet deleted successfully\" />);\n        await getPets();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to delete pet.\" />);\n        setLoading(false);\n      });\n  };\n\n  //Mod Methods\n  const createMod = async (adoptionFee) => {\n    setLoading(true);\n    createModContract(address, adoptionFee)\n      .then(async () => {\n        toast(\n          <NotificationSuccess text=\"Mod contract created successfully.\" />\n        );\n        await getModStatus();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to create mod contract.\" />);\n        setLoading(false);\n      });\n  };\n\n  const updateFee = async (newFee) => {\n    setLoading(true);\n    updateFeeAction(address, modContract, newFee)\n      .then(async () => {\n        toast(<NotificationSuccess text=\"Adoption Fee updated successfully\" />);\n        await getModStatus();\n        fetchBalance(address);\n      })\n      .catch((error) => {\n        console.log(error);\n        toast(<NotificationError text=\"Failed to update fee\" />);\n        setLoading(false);\n      })\n      .finally((_) => {\n        setLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    let ignore = false;\n\n    if (!ignore && !modFetchComplete && !petsFetchComplete) {\n      getPets(ignore);\n      getModStatus(ignore);\n    }\n\n    return () => {\n      ignore = true;\n    };\n  }, [modFetchComplete, petsFetchComplete, getPets, getModStatus]);\n\n  if (loading) {\n    return <Loader />;\n  }\n  return (\n    <>\n      <div className=\"d-flex justify-content-between align-items-center mb-4\">\n        <h1 className=\"fs-4 fw-bold mb-0\">ALGO PET SHOP</h1>\n\n        <div className=\"d-flex justify-content-between\">\n          <AddPet createPet={createPet} />\n          <ModOptions\n            createMod={createMod}\n            updateFee={updateFee}\n            modContract={modContract}\n          />\n        </div>\n      </div>\n      <div className=\"text-start container\">\n        <div id=\"adoptionNotice\" className=\"mb-4\" style={{ marginTop: \"1em\" }}>\n          <span>\n            <i className=\"bi bi-bell-fill\"></i> Adoption Fee is{\" \"}\n            {modContract.adoptFee\n              ? microAlgosToString(modContract.adoptFee)\n              : 0}{\" \"}\n            ALGO\n          </span>\n        </div>\n      </div>\n      <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\n        <>\n          {pets.map((pet, index) => (\n            <PetCard\n              address={address}\n              pet={pet}\n              adoptPet={adoptPet}\n              deletePet={deletePet}\n              key={index}\n            />\n          ))}\n        </>\n      </Row>\n    </>\n  );\n};\n\nPets.propTypes = {\n  address: PropTypes.string.isRequired,\n  fetchBalance: PropTypes.func.isRequired,\n};\n\nexport default Pets;\n","export default __webpack_public_path__ + \"static/media/petshop.0b59a906.jpg\";","import React, { useState } from \"react\";\nimport Cover from \"./components/Cover\";\nimport \"./App.css\";\nimport Wallet from \"./components/Wallet\";\nimport { Container, Nav } from \"react-bootstrap\";\nimport Pets from \"./components/petshop/Pets\";\nimport { indexerClient, myAlgoConnect } from \"./utils/constants\";\nimport { Notification } from \"./components/utils/Notifications\";\nimport coverImg from \"./assets/img/petshop.jpg\";\n\nconst App = function AppWrapper() {\n  const [address, setAddress] = useState(null);\n  const [name, setName] = useState(null);\n  const [balance, setBalance] = useState(0);\n\n  const fetchBalance = async (accountAddress) => {\n    indexerClient\n      .lookupAccountByID(accountAddress)\n      .do()\n      .then((response) => {\n        const _balance = response.account.amount;\n        setBalance(_balance);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const connectWallet = async () => {\n    myAlgoConnect\n      .connect()\n      .then((accounts) => {\n        const _account = accounts[0];\n        setAddress(_account.address);\n        setName(_account.name);\n        fetchBalance(_account.address);\n      })\n      .catch((error) => {\n        console.log(\"Could not connect to MyAlgo wallet\");\n        console.error(error);\n      });\n  };\n\n  const disconnect = () => {\n    setAddress(null);\n    setName(null);\n    setBalance(null);\n  };\n\n  return (\n    <>\n      <Notification />\n      {address ? (\n        <Container fluid=\"md\">\n          <Nav className=\"justify-content-end pt-3 pb-5\">\n            <Nav.Item>\n              <Wallet\n                address={address}\n                name={name}\n                amount={balance}\n                disconnect={disconnect}\n                symbol={\"ALGO\"}\n              />\n            </Nav.Item>\n          </Nav>\n          <main>\n            <Pets address={address} fetchBalance={fetchBalance} />\n          </main>\n        </Container>\n      ) : (\n        <Cover\n          name={\"Street Food\"}\n          coverImg={coverImg}\n          connect={connectWallet}\n        />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import algosdk from \"algosdk\";\nimport * as contractParams from \"./constants\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport petApprovalProgram from \"!!raw-loader!../contracts/petshop_approval.teal\";\nimport petClearProgram from \"!!raw-loader!../contracts/petshop_clear.teal\";\nimport { base64ToUTF8String, utf8ToBase64String } from \"./conversions\";\n\nclass Pet {\n  constructor(\n    appId,\n    appCreator,\n    name,\n    image,\n    age,\n    breed,\n    location,\n    adopted,\n    owner\n  ) {\n    this.appId = appId;\n    this.appCreator = appCreator;\n    this.name = name;\n    this.image = image;\n    this.age = age;\n    this.breed = breed;\n    this.location = location;\n    this.adopted = adopted; // 0 means false, 1 means true\n    this.owner = owner;\n  }\n}\n\n// Compile smart contract in .teal format to program\nconst compileProgram = async (programSource) => {\n  let encoder = new TextEncoder();\n  let programBytes = encoder.encode(programSource);\n  let compileResponse = await contractParams.algodClient\n    .compile(programBytes)\n    .do();\n  return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n};\n\n//======================================================PET SECTION============================================================//\n\n// CREATE PET: ApplicationCreateTxn\nexport const createPetAction = async (senderAddress, pet) => {\n  console.log(\"Adding Pet...\");\n\n  let params = await contractParams.algodClient.getTransactionParams().do();\n\n  // Compile Programs\n  const compiledApprovalProgram = await compileProgram(petApprovalProgram);\n  const compiledClearProgram = await compileProgram(petClearProgram);\n\n  // Build note to identify transaction later and required app args as Uint8Array\n  let note = new TextEncoder().encode(contractParams.petShopNote);\n  let name = new TextEncoder().encode(pet.name);\n  let image = new TextEncoder().encode(pet.image);\n  let age = new TextEncoder().encode(pet.age);\n  let breed = new TextEncoder().encode(pet.breed);\n  let location = new TextEncoder().encode(pet.location);\n  let owner = new TextEncoder().encode(senderAddress);\n\n  let appArgs = [name, image, age, breed, location, owner];\n\n  let txn = algosdk.makeApplicationCreateTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    approvalProgram: compiledApprovalProgram,\n    clearProgram: compiledClearProgram,\n    numLocalInts: contractParams.numLocalInts,\n    numLocalByteSlices: contractParams.numLocalBytes,\n    numGlobalInts: contractParams.numGlobalInts,\n    numGlobalByteSlices: contractParams.numGlobalBytes,\n    note: note,\n    appArgs: appArgs,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await contractParams.myAlgoConnect.signTransaction(\n    txn.toByte()\n  );\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await contractParams.algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(\n    contractParams.algodClient,\n    txId,\n    4\n  );\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n\n  // Get created application id and notify about completion\n  let transactionResponse = await contractParams.algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n  let appId = transactionResponse[\"application-index\"];\n  console.log(\"Created new app-id: \", appId);\n  return appId;\n};\n\n// ADOPT PET:\nexport const adoptPetAction = async (senderAddress, pet, modContract) => {\n  console.log(\"Adopting pet...\");\n\n  let params = await contractParams.algodClient.getTransactionParams().do();\n\n  // Build required app args as Uint8Array\n  let adoptArg = new TextEncoder().encode(\"adopt\");\n  let newOwner = new TextEncoder().encode(senderAddress);\n  let appArgs = [adoptArg, newOwner];\n\n  let foreignApps = [modContract.appId];\n\n  // Create ApplicationCallTxn\n  let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: pet.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n    foreignApps: foreignApps,\n  });\n  // Create PaymentTxn\n  let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: senderAddress,\n    to: pet.appCreator,\n    amount: modContract.adoptFee,\n    suggestedParams: params,\n  });\n\n  let txnArray = [appCallTxn, paymentTxn];\n\n  // Create group transaction out of previously build transactions\n  let groupID = algosdk.computeGroupID(txnArray);\n  for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\n\n  // Sign & submit the group transaction\n  let signedTxn = await contractParams.myAlgoConnect.signTransaction(\n    txnArray.map((txn) => txn.toByte())\n  );\n  console.log(\"Signed group transaction\");\n  let tx = await contractParams.algodClient\n    .sendRawTransaction(signedTxn.map((txn) => txn.blob))\n    .do();\n\n  // Wait for group transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(\n    contractParams.algodClient,\n    tx.txId,\n    4\n  );\n\n  // Notify about completion\n  console.log(\n    \"Group transaction \" +\n      tx.txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// DELETE PET\nexport const deletePetAction = async (senderAddress, index) => {\n  console.log(\"Deleting application\");\n\n  let params = await contractParams.algodClient.getTransactionParams().do();\n  let sender = new TextEncoder().encode(senderAddress);\n  let appArgs = [sender];\n\n  // Create ApplicationDeleteTxn\n  let txn = algosdk.makeApplicationDeleteTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    appIndex: index,\n    appArgs: appArgs,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await contractParams.myAlgoConnect.signTransaction(\n    txn.toByte()\n  );\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await contractParams.algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  const confirmedTxn = await algosdk.waitForConfirmation(\n    contractParams.algodClient,\n    txId,\n    4\n  );\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n\n  // Get application id of deleted application and notify about completion\n  let transactionResponse = await contractParams.algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n  let appId = transactionResponse[\"txn\"][\"txn\"].apid;\n  console.log(\"Deleted app-id: \", appId);\n};\n\n// GET PETS: Using Indexer\nexport const getPetsAction = async () => {\n  console.log(\"Fetching Pets...\");\n  let note = new TextEncoder().encode(contractParams.petShopNote);\n  let encodedNote = Buffer.from(note).toString(\"base64\");\n\n  // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\n  let transactionInfo = await contractParams.indexerClient\n    .searchForTransactions()\n    .notePrefix(encodedNote)\n    .txType(\"appl\")\n    .minRound(contractParams.minRound)\n    .do();\n\n  let pets = [];\n  for (const transaction of transactionInfo.transactions) {\n    let appId = transaction[\"created-application-index\"];\n    if (appId) {\n      // Step 2: Get each application by application id\n      let pet = await getApplication(appId);\n      if (pet) {\n        pets.push(pet);\n      }\n    }\n  }\n  console.log(\"Pets Fetched...\");\n  return pets;\n};\n\nconst getApplication = async (appId) => {\n  try {\n    // 1. Get application by appId\n    let response = await contractParams.indexerClient\n      .lookupApplications(appId)\n      .includeAll(true)\n      .do();\n    if (response.application.deleted) {\n      return null;\n    }\n\n    let globalState = response.application.params[\"global-state\"];\n\n    // 2. Parse fields of response and return product\n    let appCreator = response.application.params.creator;\n    let name = \"\";\n    let image = \"\";\n    let age = \"\";\n    let breed = \"\";\n    let location = \"\";\n    let adopted = 0;\n    let owner = \"\";\n\n    if (getField(\"NAME\", globalState) !== undefined) {\n      let field = getField(\"NAME\", globalState).value.bytes;\n      name = base64ToUTF8String(field);\n    }\n\n    if (getField(\"IMAGE\", globalState) !== undefined) {\n      let field = getField(\"IMAGE\", globalState).value.bytes;\n      image = base64ToUTF8String(field);\n    }\n\n    if (getField(\"AGE\", globalState) !== undefined) {\n      let field = getField(\"AGE\", globalState).value.bytes;\n      age = base64ToUTF8String(field);\n    }\n\n    if (getField(\"BREED\", globalState) !== undefined) {\n      let field = getField(\"BREED\", globalState).value.bytes;\n      breed = base64ToUTF8String(field);\n    }\n\n    if (getField(\"LOCATION\", globalState) !== undefined) {\n      let field = getField(\"LOCATION\", globalState).value.bytes;\n      location = base64ToUTF8String(field);\n    }\n\n    if (getField(\"ADOPTED\", globalState) !== undefined) {\n      adopted = getField(\"ADOPTED\", globalState).value.uint;\n    }\n\n    if (getField(\"OWNER\", globalState) !== undefined) {\n      let field = getField(\"OWNER\", globalState).value.bytes;\n      owner = base64ToUTF8String(field);\n    }\n\n    return new Pet(\n      appId,\n      appCreator,\n      name,\n      image,\n      age,\n      breed,\n      location,\n      adopted,\n      owner\n    );\n  } catch (err) {\n    return null;\n  }\n};\n\nconst getField = (fieldName, globalState) => {\n  return globalState.find((state) => {\n    return state.key === utf8ToBase64String(fieldName);\n  });\n};\n","import algosdk from \"algosdk\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\n\nconst config = {\n  algodToken: \"\",\n  algodServer: \"https://node.testnet.algoexplorerapi.io\",\n  algodPort: \"\",\n  indexerToken: \"\",\n  indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io\",\n  indexerPort: \"\",\n};\n\nexport const algodClient = new algosdk.Algodv2(\n  config.algodToken,\n  config.algodServer,\n  config.algodPort\n);\n\nexport const indexerClient = new algosdk.Indexer(\n  config.indexerToken,\n  config.indexerServer,\n  config.indexerPort\n);\n\nexport const myAlgoConnect = new MyAlgoConnect();\n\nexport const minRound = 21540981;\n\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\nexport const petShopNote = \"pet-shop:uPetsv2\";\n\n// Maximum local storage allocation, immutable\nexport const numLocalInts = 0;\nexport const numLocalBytes = 0;\n// Maximum global storage allocation, immutable\nexport const numGlobalInts = 2; // Global variables stored as Int: age, adopted, fee\nexport const numGlobalBytes = 6; // Global variables stored as Bytes: name, image, breed, location, owner\n\nexport const ALGORAND_DECIMALS = 6;\n\n// DATA For MOD Contract\nexport const modContractNote = \"pet-shop:uModv2\";\n// Maximum local storage allocation, immutable\nexport const numModLocalInts = 0;\nexport const numModLocalBytes = 0;\n// Maximum global storage allocation, immutable\nexport const numModGlobalInts = 1; // Global variables stored as Int: global_adopt_fee\nexport const numModGlobalBytes = 0;\n// Address of original mod contract creator;\nexport const modCreator =\n  \"36EC6PQ47JIH4IFT5WE5QT3FETNFJU6IEUKQ6B6XAB5Y25EICQLT4REMSE\";\n","import algosdk from \"algosdk\";\nimport * as contractParams from \"./constants\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport modApprovalProgram from \"!!raw-loader!../contracts/mod_approval.teal\";\nimport modClearProgram from \"!!raw-loader!../contracts/mod_clear.teal\";\nimport { utf8ToBase64String } from \"./conversions\";\n\nclass ModContract {\n  constructor(appId, adoptFee) {\n    this.appId = appId;\n    this.adoptFee = adoptFee;\n  }\n}\n\n// Compile smart contract in .teal format to program\nconst compileProgram = async (programSource) => {\n  let encoder = new TextEncoder();\n  let programBytes = encoder.encode(programSource);\n  let compileResponse = await contractParams.algodClient\n    .compile(programBytes)\n    .do();\n  return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n};\n\n// INITIALIZE MOD CONTRACT\nexport const createModContract = async (senderAddress, fee) => {\n  console.log(\"Creating Mod Contract...\");\n\n  let params = await contractParams.algodClient.getTransactionParams().do();\n\n  // Compile Programs\n  const compiledApprovalProgram = await compileProgram(modApprovalProgram);\n  const compiledClearProgram = await compileProgram(modClearProgram);\n\n  // Build note to identify transaction later and required app args as Uint8Array\n  let note = new TextEncoder().encode(contractParams.modContractNote);\n  let fee_arg = algosdk.encodeUint64(fee);\n\n  let appArgs = [fee_arg];\n\n  let txn = algosdk.makeApplicationCreateTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    approvalProgram: compiledApprovalProgram,\n    clearProgram: compiledClearProgram,\n    numLocalInts: contractParams.numModLocalInts,\n    numLocalByteSlices: contractParams.numModLocalBytes,\n    numGlobalInts: contractParams.numModGlobalInts,\n    numGlobalByteSlices: contractParams.numModGlobalBytes,\n    note: note,\n    appArgs: appArgs,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await contractParams.myAlgoConnect.signTransaction(\n    txn.toByte()\n  );\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await contractParams.algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(\n    contractParams.algodClient,\n    txId,\n    4\n  );\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n\n  // Get created application id and notify about completion\n  let transactionResponse = await contractParams.algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n  let appId = transactionResponse[\"application-index\"];\n  console.log(\"Created new app-id: \", appId);\n  return appId;\n};\n\n// UPDATE FEE\nexport const updateFeeAction = async (senderAddress, modContract, newFee) => {\n  console.log(\"Updating Price....\");\n\n  let params = await contractParams.algodClient.getTransactionParams().do();\n\n  // Build required app args as Uint8Array\n  let newFeeArg = algosdk.encodeUint64(newFee);\n  let feeArg = new TextEncoder().encode(\"newFee\");\n  let appArgs = [feeArg, newFeeArg];\n\n  // Create ApplicationCallTxn\n  let txn = algosdk.makeApplicationCallTxnFromObject({\n    from: senderAddress,\n    appIndex: modContract.appId,\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\n    suggestedParams: params,\n    appArgs: appArgs,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await contractParams.myAlgoConnect.signTransaction(\n    txn.toByte()\n  );\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await contractParams.algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  let confirmedTxn = await algosdk.waitForConfirmation(\n    contractParams.algodClient,\n    txId,\n    4\n  );\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n};\n\n// DELETE MOD CONTRACT\nexport const deleteModContract = async (senderAddress, modContract) => {\n  console.log(\"Deleting Mod Contract...\");\n\n  let params = await contractParams.algodClient.getTransactionParams().do();\n\n  // Create ApplicationDeleteTxn\n  let txn = algosdk.makeApplicationDeleteTxnFromObject({\n    from: senderAddress,\n    suggestedParams: params,\n    appIndex: modContract.appId,\n  });\n\n  // Get transaction ID\n  let txId = txn.txID().toString();\n\n  // Sign & submit the transaction\n  let signedTxn = await contractParams.myAlgoConnect.signTransaction(\n    txn.toByte()\n  );\n  console.log(\"Signed transaction with txID: %s\", txId);\n  await contractParams.algodClient.sendRawTransaction(signedTxn.blob).do();\n\n  // Wait for transaction to be confirmed\n  const confirmedTxn = await algosdk.waitForConfirmation(\n    contractParams.algodClient,\n    txId,\n    4\n  );\n\n  // Get the completed Transaction\n  console.log(\n    \"Transaction \" +\n      txId +\n      \" confirmed in round \" +\n      confirmedTxn[\"confirmed-round\"]\n  );\n\n  // Get application id of deleted application and notify about completion\n  let transactionResponse = await contractParams.algodClient\n    .pendingTransactionInformation(txId)\n    .do();\n  let appId = transactionResponse[\"txn\"][\"txn\"].apid;\n  console.log(\"Deleted app-id: \", appId);\n};\n\n//GET MOD CONTRACT\nexport const getModContract = async () => {\n  console.log(\"Fetching Mod Contract...\");\n  let note = new TextEncoder().encode(contractParams.modContractNote);\n  let encodedNote = Buffer.from(note).toString(\"base64\");\n\n  // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\n  let transactionInfo = await contractParams.indexerClient\n    .searchForTransactions()\n    .notePrefix(encodedNote)\n    .txType(\"appl\")\n    .minRound(contractParams.minRound)\n    .address(contractParams.modCreator)\n    .do();\n\n  // NOTE: Adding the address tag in the indexerClient returns transactions from newest to oldest.\n  // Hence after the first valid mod account, we break out of the loop\n  // Only getting most recent modContract\n  let modContract;\n  for (const transaction of transactionInfo.transactions) {\n    let appId = transaction[\"created-application-index\"];\n    if (appId) {\n      // Step 2: Get application by application id\n      let _modContract = await getModApplication(appId);\n      if (_modContract) {\n        modContract = _modContract;\n        break;\n      }\n    }\n  }\n  console.log(\"Mod contract fetched..\");\n  return modContract;\n};\n\nconst getModApplication = async (appId) => {\n  try {\n    let response = await contractParams.indexerClient\n      .lookupApplications(appId)\n      .includeAll(true)\n      .do();\n\n    if (response.application.deleted) {\n      return null;\n    }\n\n    let globalState = response.application.params[\"global-state\"];\n\n    // Parse field of response and return contract\n    let adoptFee = 0;\n\n    if (getField(\"FEE\", globalState) !== undefined) {\n      adoptFee = getField(\"FEE\", globalState).value.uint;\n    }\n\n    return new ModContract(appId, adoptFee);\n  } catch {}\n};\n\nconst getField = (fieldName, globalState) => {\n  return globalState.find((state) => {\n    return state.key === utf8ToBase64String(fieldName);\n  });\n};\n"],"sourceRoot":""}